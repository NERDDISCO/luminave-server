{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/index.js","webpack:///./src/schemas/timeline.js","webpack:///external \"apollo-server\"","webpack:///external \"graphql-subscriptions\""],"names":["schema","makeExecutableSchema","typeDefs","timelineSchema","resolvers","timelineResolvers","server","ApolloServer","listen","then","url","console","log","pubsub","PubSub","_scenes","gql","Query","getTimelineScenes","Mutation","setTimelineScenes","_","scenes","publish","Subscription","timelineScenesUpdated","resolve","payload","subscribe","asyncIterator"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;CAOA;;AACA,MAAMA,MAAM,GAAGC,0EAAoB,CAAC;AAClCC,UAAQ,EAAE,CAACC,wDAAD,CADwB;AAElCC,WAAS,EAAE,CAACC,2DAAD;AAFuB,CAAD,CAAnC,C,CAKA;;AACA,MAAMC,MAAM,GAAG,IAAIC,0DAAJ,CAAiB;AAAEP;AAAF,CAAjB,CAAf,C,CAEA;;AACAM,MAAM,CAACE,MAAP,GAAgBC,IAAhB,CAAqB,CAAC;AAAEC;AAAF,CAAD,KAAa;AAChCC,SAAO,CAACC,GAAR,CAAa,sBAAqBF,GAAI,EAAtC;AACD,CAFD,E;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACO,MAAMG,MAAM,GAAG,IAAIC,4DAAJ,EAAf;AAEP,IAAIC,OAAO,GAAG,EAAd;AAEO,MAAMf,MAAM,GAAGgB,iDAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAnB;AA6BA,MAAMZ,SAAS,GAAG;AACvBa,OAAK,EAAE;AACLC,qBAAiB,EAAE,MAAMH;AADpB,GADgB;AAKvBI,UAAQ,EAAE;AACRC,qBAAiB,EAAE,CAACC,CAAD,EAAI;AAAEC;AAAF,KAAJ,KAAmB;AACpCP,aAAO,GAAGO,MAAV,CADoC,CAGpC;;AACAT,YAAM,CAACU,OAAP,CAAe,eAAf,EAAgCR,OAAhC;AAEA,aAAOA,OAAP;AACD;AARO,GALa;AAgBvBS,cAAY,EAAE;AACZC,yBAAqB,EAAE;AACrBC,aAAO,EAAEC,OAAO,IAAIA,OADC;AAErBC,eAAS,EAAE,MAAMf,MAAM,CAACgB,aAAP,CAAqB,eAArB;AAFI;AADX;AAhBS,CAAlB,C;;;;;;;;;;;;;;;;;;;;;;;ACnCP,0C;;;;;;;;;;;ACAA,kD","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"build/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { ApolloServer, makeExecutableSchema } from 'apollo-server'\n\nimport { \n  schema as timelineSchema,\n  resolvers as timelineResolvers\n} from './schemas/timeline'\n\n// Combine schemas & resolvers\nconst schema = makeExecutableSchema({\n  typeDefs: [timelineSchema],\n  resolvers: [timelineResolvers]\n})\n\n// Create the server and add the combined schema\nconst server = new ApolloServer({ schema })\n\n// Start the server\nserver.listen().then(({ url }) => {\n  console.log(`ðŸš€ Server ready at ${url}`)\n})\n","import { gql } from 'apollo-server'\nimport { PubSub } from 'graphql-subscriptions'\nexport const pubsub = new PubSub()\n\nlet _scenes = []\n\nexport const schema = gql`\n  \"\"\"\n  Contains all scenes\n  \"\"\"\n  type Timeline {\n    scenes: [Scene]!\n  }\n\n  type Scene {\n    name: String\n  }\n\n  input SceneInput {\n    name: String\n  }\n\n  type Query {\n    getTimelineScenes: [Scene]\n  }\n\n  type Mutation {\n    setTimelineScenes(scenes: [SceneInput]): [Scene]\n  }\n\n  type Subscription {\n    timelineScenesUpdated: [Scene]\n  }\n`\n\nexport const resolvers = {\n  Query: {\n    getTimelineScenes: () => _scenes\n  },\n\n  Mutation: {\n    setTimelineScenes: (_, { scenes }) => {\n      _scenes = scenes\n\n      // Publish an event that the part was added\n      pubsub.publish('scenesUpdated', _scenes)\n\n      return _scenes\n    }\n  },\n\n  Subscription: {\n    timelineScenesUpdated: {\n      resolve: payload => payload,\n      subscribe: () => pubsub.asyncIterator('scenesUpdated')\n    }\n  }\n}\n","module.exports = require(\"apollo-server\");","module.exports = require(\"graphql-subscriptions\");"],"sourceRoot":""}